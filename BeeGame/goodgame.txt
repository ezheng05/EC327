#include <SFML/Graphics.hpp>
#include <SFML/Window.hpp>
#include <SFML/System.hpp>
#include <cstdlib> 
#include <ctime>   
#include <string>

int main() {

    sf::RenderWindow window(sf::VideoMode(800, 600), "Bee Game");


    sf::Texture backgroundTexture;
    if (!backgroundTexture.loadFromFile("./assets/background.jpg")) {
        return -1; // Error loading background image
    }
    sf::Sprite background(backgroundTexture);


    sf::Vector2 windowSize = window.getSize();
    sf::Vector2 textureSize = backgroundTexture.getSize();
    background.setScale(
        (float)(windowSize.x) / textureSize.x, 
        (float)(windowSize.y) / textureSize.y
    );



    sf::Texture playerTexture;

    
    if (!playerTexture.loadFromFile("./assets/player.png")) {
        return -1; 
    }
    sf::Sprite player(playerTexture);
    player.setPosition(400, 300);

    

    player.setScale(0.1f, 0.1f); 


    sf::Texture sunflowerTexture;



    if (!sunflowerTexture.loadFromFile("./assets/sunflower.png")) {

                return -1;
    }
    sf::Sprite sunflower(sunflowerTexture);

    sunflower.setScale(0.05f, 0.05f);


    std::srand(std::time(NULL));



    float playerSpeed = 200.0f; 


    int score = 0;


    sf::Font font;


    if (!font.loadFromFile("./assets/ARIALBD.ttf")) {
            return -1;
    }


    sf::Text scoreText;
    scoreText.setFont(font);


    scoreText.setCharacterSize(24);

    scoreText.setFillColor(sf::Color::Black);
    scoreText.setString("Score: " + std::to_string(score));

    // Center the score text
    sf::FloatRect textRect = scoreText.getLocalBounds();
    scoreText.setOrigin(textRect.left + textRect.width / 2.0f, textRect.top + textRect.height / 2.0f);
    scoreText.setPosition(windowSize.x / 2.0f, textRect.height / 2.0f + 10); // 10 pixels padding from the top

    // Start the game loop
    sf::Clock clock;
    while (window.isOpen()) {
        // Process events
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed) {
                window.close();
            }
        }

        // Get the elapsed time since the last frame
        sf::Time deltaTime = clock.restart();
        float dt = deltaTime.asSeconds();

        // Handle player movement and rotation
        sf::Vector2f movement(0.0f, 0.0f);
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Left)) {
            movement.x -= playerSpeed * dt;
            player.setRotation(270); // Rotate left
        }
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right)) {
            movement.x += playerSpeed * dt;
            player.setRotation(90); // Rotate right
        }
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Up)) {
            movement.y -= playerSpeed * dt;
            player.setRotation(0); // Rotate up
        }
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Down)) {
            movement.y += playerSpeed * dt;
            player.setRotation(180); // Rotate down
        }

        // If diagonal movement is detected, calculate the angle
        if (movement.x != 0 && movement.y != 0) {
            float angle = std::atan2(movement.y, movement.x) * 180 / 3.14159265;
            player.setRotation(angle + 90); // Adjust rotation angle
        }

        // Apply movement to the player
        player.move(movement);

        // Check for collision with the sunflower
        if (player.getGlobalBounds().intersects(sunflower.getGlobalBounds())) {
            score++;
            scoreText.setString("Score: " + std::to_string(score));

            // Re-center the score text after updating the score
            sf::FloatRect textRect = scoreText.getLocalBounds();
            scoreText.setOrigin(textRect.left + textRect.width / 2.0f, textRect.top + textRect.height / 2.0f);
            scoreText.setPosition(windowSize.x / 2.0f, textRect.height / 2.0f + 10); // 10 pixels padding from the top

        float x = (float)(std::rand() % (windowSize.x - (int)(sunflower.getGlobalBounds().width)));
        float y = (float)(std::rand() % (windowSize.y - (int)(sunflower.getGlobalBounds().height)));
        sunflower.setPosition(x, y);
        }

        // Clear the window
        window.clear();

        // Draw the background
        window.draw(background);

        // Draw the sunflower
        window.draw(sunflower);

        // Draw the player
        window.draw(player);

        // Draw the score
        window.draw(scoreText);

        // Display the contents of the window
        window.display();
    }

    return 0;
}
